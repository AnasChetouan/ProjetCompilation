; par définiton 
;<expr-li> := « ( » <keyword> « . » <expr> « ) »
;
;teste => sortie (interpréteur portacle)
;(lispVersli '(if (> 1 2) 1 2))  =>  (:IF NIL (:CONST . 1) (:CONST . 2))

(defun lispVersli(expr &optional env)
(cond 
;atome constant = littéral
((and (atom expr) (constantp expr))
    (cons :const expr))
;Symbol
((symbolp expr)
    (let ((cell (assoc expr env)))
      (if cell
          `(:cvar ,(cadr cell) ,(caddr cell))
        (error "~S : variable est inconnue " expr))))
 ;; lambda ex: ((lambda (x) x) 1)
   ((and (consp (car expr))
         (eq 'lambda (caar expr)))
    `(:mcall ,(lispVersli (car expr) env)
            ,@(mapcar (lambda (param)
                        (lispVersli param env))
                      (cdr expr))))

   ;; lambda ex: ((lambda (x) x) 1)
   ((and (consp (car expr))
         (eq 'lambda (caar expr)))
    `(:mcall ,(lispVersli (car expr) env)
            ,@(mapcar (lambda (param)
                        (lispVersli param env))
                      (cdr expr))))
   ;; (not-symbol ...)
   ((not (symbolp (car expr)))
    (warn "~S n'est pas un symbol" (car expr)))
     ;; cas: fonction meta-definie
   ((get (car expr) :defun)
    `(:mcall ,(car expr)
             ,@(mapcar (lambda (x) (lispVersli x env)) (cdr expr))))
   ;;cas: macro meta-definie
   ((get (car expr) :defmacro)
    `(:mcall ,(car expr)
             ,@(mapcar (lambda (x) `(:const . ,x)) (cdr expr))))
   ;; cas: fonction inconnue
   ((and (not (fboundp (car expr))); symbole sans définiton fonctionnelle
         (not (get (car expr) :defun)) ; ce n'est pas defun
         (not (get (car expr) :defmacro))) ; ni defmacro
    `(:unknown ,expr ,env)) ; donc on ne sais pas ce que c'est
  ;;cas: if
   ((eq 'if (car expr))
    (list :if
          (lispVersli (second expr) env) 
          (lispVersli (third expr) env)
          (lispVersli (fourth expr) env)))
;; cas: quote
   ((eq 'quote (car expr)) 
    (cons :const (second expr))) ; (:cont expr) on sup '
;; cas: defun
   ((eq 'defun (car expr))
    `(:mcall set-defun (:const . ,(second expr))
                ,(lispVersli `(lambda ,(third expr) ,@(cdddr expr)) env)))
  ;;cas: defmacro
   ((eq 'defmacro (car expr))
    `(:mcall set-defmacro (:const . ,(second expr))
             ,(lispVersli `(lambda ,(third expr) ,@(cdddr expr)) env)))
   ;;cas: apply
   ((eq 'apply (car expr))
    `(:sapply ,(second expr) ,@(cddr expr)))
 ;;cas : default ( tout les cas que j'ai pas encore fait ) 
   (t
    (error "~S pas encore traitée :/ " (car expr)))
) )
